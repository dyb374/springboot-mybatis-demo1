<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>

    <!-- 数据库驱动:选择本地硬盘上面的数据库驱动包-->
    <classPathEntry  location="D:\Java\apache-maven\repo\mysql\mysql-connector-java\5.1.37\mysql-connector-java-5.1.37.jar"/>

    <context id="MySQLTables" targetRuntime="MyBatis3" defaultModelType="flat">

        <property name="javaFileEncoding" value="UTF-8"/>

        <!-- 为生成的java模型添加一个toString方法 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>

        <!-- Java模型生成equals和hashcode方法 -->
        <!-- <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/> -->

        <!--关闭注释 -->
        <commentGenerator>
            <property name="suppressAllComments" value="true"/>
            <property name="suppressDate" value="true"/>
        </commentGenerator>

        <!--数据库连接信息 -->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                        connectionURL="jdbc:mysql://45.77.129.111/learning_only?characterEncoding=utf-8" userId="root"
                        password="qaz62936456">
        </jdbcConnection>

        <!--生成的model 包路径 -->
        <javaModelGenerator
                targetPackage="com.dyb.springbootmybatisdemo1.entity" targetProject="src/main/java">
            <property name="enableSubPackages" value="ture"/>
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!--生成xml mapper文件 路径 -->
        <sqlMapGenerator targetPackage="mapping"
                         targetProject="src/main/resources">
            <property name="enableSubPackages" value="ture"/>
        </sqlMapGenerator>

        <!-- 生成的Dao接口 的包路径 -->
        <javaClientGenerator type="XMLMAPPER"
                             targetPackage="com.dyb.springbootmybatisdemo1.dao" targetProject="src/main/java">
            <property name="enableSubPackages" value="ture"/>
        </javaClientGenerator>

        <!-- <table>元素用于选择数据库中的一个表。选择的表将导致为每个表生成以下对象: •一个MyBatis / iBATIS•格式化的SQL的映射文件
			•一组类,形成了“模型”表包括: •一个类来匹配表的主键(如果表有一个主键)。 •表中字段匹配的,不是在主键,而非BLOB字段。这个类将扩展主键,如果有一个。
			•一个类来持有任何表中的BLOB字段(如果有的话)。这个类将扩展其中一个的前面两个类取决于表的配置。 •一个类,用于生成动态where子句,在不同的“by
			Example”方法(selectByExample,deleteByExample)。 •(可选)DAO接口和类 tableName:(必须配置)指定表的名称
			domainObjectName：生成javabean对象的基本名称。如果未指定,MBG将自动基于表名生成。 这个名字(无论是在这里指定,或自动生成)将被用来作为域类名和DAO类的名字。
			enableInsert：是否生成插入语句。默认是true enableSelectByPrimaryKey：是否通过主键生成选择语句。不管是否有这种设置,如果该表没有一个主键将不会生成。
			enableUpdateByPrimaryKey：是否通过主键生成更新语句。如果该表没有主键，不管是否设置该属性,语句将不会生成。 enableDeleteByPrimaryKey：是否通过主键生成删除语句。如果该表没有主键，不管这种设置该属性,语句将不会生成。
			enableDeleteByExample：是否通过example对象生成删除语句。这个声明使得许多不同的动态删除在运行时生成。 enableCountByExample：是否通过example对象生成计算行数语句。该语句将返回一个表中的行数相匹配的example。
			enableUpdateByExample：是否通过example对象生成更新语句。该语句将更新一个表中相匹配的记录。 selectByPrimaryKeyQueryId：这个值将被添加到选择列表中选择通过主键的声明在本表格:“'<值>作为QUERYID”。这可以用于识别查询在DBA在运行时跟踪工具。如果你需使用,你应该指定一个唯一的id为每个不同的查询生成MBG。
			selectByExampleQueryId：这个值将被添加到选择列表中选择通过例子的声明在本表格:“'<值>作为QUERYID”。这可以用于识别查询在DBA在运行时跟踪工具。如果你需使用,你应该指定一个唯一的id为每个不同的查询生成MBG。
			enableSelectByExample:是否应该生成通过example的选择语句。这个声明使得许多不同的动态查询是在运行时生成。 modelType：此属性用于覆盖默认的模型类型,如果你想对这张表这么做。如果未指定,MBG将生成的域对象基于上下文默认的模型类型。
			该模型类型定义了如何将生成MBG域类。 一些模型类型MBG将生成一个单一的域类为每个表,和其他可能产生不同的类MBG取决于表的结构。 escapeWildcards：排除通配符。这意味着无论SQL通配符('_
			'和' % ')的模式和表名都应该避免在搜寻列。 这是一些驱动要求如果模式或表包含一个SQL通配符(例如,如果一个表的名字是MY_TABLE,一些驱动要求的下划线字符进行转义)。 -->

        <!--对应数据库表名 -->
        <!-- 要生成全部的表时： <table tableName="%" /> -->
        <table tableName="%" enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"/>
    </context>
</generatorConfiguration>